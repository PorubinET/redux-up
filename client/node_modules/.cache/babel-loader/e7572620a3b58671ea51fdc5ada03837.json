{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Redux/Projects/redux-app-main-copy/client/src/components/taskInput/taskInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskCreate, inputLoad, completedAll } from \"../../redux/actions\";\nimport { addTask } from \"../../services/taskServices\";\nimport TaskItem from \"../taskItem/taskItem\";\nimport './taskinput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TaskInput() {\n  _s();\n\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n  const filter = useSelector(state => {\n    const {\n      itemsReducer\n    } = state;\n    return itemsReducer.filter;\n  });\n  const tasks = useSelector(state => {\n    const {\n      itemsReducer\n    } = state;\n\n    if (filter === \"compleated\") {\n      return itemsReducer.tasks.filter(items => items.done);\n    } else if (filter === \"active\") {\n      return itemsReducer.tasks.filter(items => !items.done);\n    } else {\n      return itemsReducer.tasks;\n    }\n  }); // ввод текста\n\n  const handleChange = e => {\n    setText(e.target.value = e.target.value.replace(/ +/g, ' '));\n  }; // добавление таски\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (text === \"\" || text === \" \") {\n      alert('Заполните поле');\n    } else {\n      try {\n        const {\n          data\n        } = await addTask({\n          text: text.trim()\n        });\n        console.log(data);\n        dispatch(taskCreate(data));\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    setText(e.target.value = \"\");\n  };\n\n  const allCompleated = async e => {\n    e.preventDefault();\n    dispatch(completedAll(tasks.every(items => items.done)));\n  }; // рендер\n\n\n  useEffect(() => {\n    dispatch(inputLoad());\n  }, [dispatch]); // взаимодействие с css \n\n  let classArrow, classCheck;\n\n  if (tasks.length) {\n    classArrow = \"to-do__list-btn-arrow to-do__list-btn-arrow-active\";\n    classCheck = \"to-do__list-btn to-do__list-btn-active\";\n  } else {\n    classArrow = \"to-do__list-btn-arrow\";\n    classCheck = \"to-do__list-btn\";\n  }\n\n  if (tasks.every(item => item.done)) {\n    classArrow += \" to-do__fading\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App flex\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"add\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: classCheck,\n        onClick: allCompleated,\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: classArrow,\n        src: \"/img/arrow.svg\",\n        alt: \"arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"to-do__task\",\n        type: \"text\",\n        required: true,\n        value: text,\n        onChange: handleChange,\n        placeholder: \"What needs to be done?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        text: task.task,\n        done: task.done,\n        _id: task._id\n      }, task._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TaskInput, \"JphTHMv8cWdnWdSFQVOOupZfawA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TaskInput;\nexport default TaskInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskInput\");","map":{"version":3,"sources":["/home/user/Desktop/Redux/Projects/redux-app-main-copy/client/src/components/taskInput/taskInput.jsx"],"names":["useState","useEffect","useDispatch","useSelector","taskCreate","inputLoad","completedAll","addTask","TaskItem","TaskInput","text","setText","dispatch","filter","state","itemsReducer","tasks","items","done","handleChange","e","target","value","replace","handleSubmit","preventDefault","alert","data","trim","console","log","error","allCompleated","every","classArrow","classCheck","length","item","map","task","_id"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskCreate, inputLoad, completedAll } from \"../../redux/actions\";\nimport { addTask } from \"../../services/taskServices\";\nimport TaskItem from \"../taskItem/taskItem\"\nimport './taskinput.css'\n\n\n\nfunction TaskInput() {\n    const [text, setText] = useState('');\n    const dispatch = useDispatch();\n    const filter = useSelector(state => {\n        const { itemsReducer } = state;\n        return itemsReducer.filter;\n    })\n\n    const tasks = useSelector(state => {\n        const { itemsReducer } = state;\n        if (filter === \"compleated\") {\n            return itemsReducer.tasks.filter((items) => items.done);\n        }\n        else if (filter === \"active\") {\n            return itemsReducer.tasks.filter(items => !items.done);\n        }\n        else {\n            return itemsReducer.tasks\n        }\n    })\n\n    // ввод текста\n    const handleChange = (e) => { setText(e.target.value = e.target.value.replace(/ +/g, ' ')) }\n\n    // добавление таски\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (text === \"\" || text === \" \") {\n            alert('Заполните поле')\n        }\n        else {\n            try {\n                const { data } = await addTask({ text: text.trim()});\n                console.log(data)\n                dispatch(taskCreate(data))\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        setText(e.target.value = \"\")\n    };\n\n    const allCompleated = async (e) => {\n        e.preventDefault();\n        dispatch(completedAll(tasks.every(items => items.done)))\n    }\n\n    // рендер\n    useEffect(() => {\n        dispatch(inputLoad())\n    }, [dispatch]);\n\n    // взаимодействие с css \n    let classArrow, classCheck;\n    if (tasks.length) {\n        classArrow = \"to-do__list-btn-arrow to-do__list-btn-arrow-active\";\n        classCheck = \"to-do__list-btn to-do__list-btn-active\";\n    } else {\n        classArrow = \"to-do__list-btn-arrow\";\n        classCheck = \"to-do__list-btn\";\n    }\n\n    if (tasks.every(item => item.done)) { classArrow += \" to-do__fading\" }\n\n    return (\n        <div className=\"App flex\">\n            <form\n                className=\"add\"\n                onSubmit={handleSubmit}\n            >\n                <input\n                    className={classCheck}\n                    onClick={allCompleated}\n                    type=\"checkbox\">\n                </input>\n                <img\n                    className={classArrow}\n                    src=\"/img/arrow.svg\"\n                    alt=\"arrow\"\n                />\n                <input\n                    className=\"to-do__task\"\n                    type=\"text\"\n                    required={true}\n                    value={text}\n                    onChange={handleChange}\n                    placeholder=\"What needs to be done?\">\n                </input>\n            </form>\n            <ul >\n                {tasks.map((task) => (\n                    <TaskItem\n                        text={task.task}\n                        done={task.done}\n                        key={task._id}\n                        _id={task._id}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default TaskInput;\n"]},"metadata":{},"sourceType":"module"}