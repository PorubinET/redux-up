{"ast":null,"code":"import { LOAD_TASK, CREATE_TASK, FILTER_TASK, UPDATE_TEXT, DELETE_TASK, DELETE_TASK_ALL, COMPLETED_ALL_TASK, UPDATE_CHECK_TASK } from \"./types\";\nconst initialState = {\n  tasks: [],\n  filter: 'all'\n};\nexport const itemsReducer = (state = initialState, action) => {\n  const {\n    payload\n  } = action;\n  const {\n    tasks\n  } = state;\n\n  switch (action.type) {\n    case LOAD_TASK:\n      return { ...state,\n        tasks: payload\n      };\n\n    case CREATE_TASK:\n      return { ...state,\n        tasks: [...state.tasks, payload]\n      };\n\n    case FILTER_TASK:\n      return { ...state,\n        filter: action.filt\n      };\n\n    case DELETE_TASK_ALL:\n      return { ...state,\n        tasks: tasks.filter(items => !items.done)\n      };\n\n    case UPDATE_TEXT:\n      return { ...state,\n        tasks: tasks.map(item => ({ ...item,\n          task: item._id === payload._id ? payload.task : item.task\n        }))\n      };\n\n    case UPDATE_CHECK_TASK:\n      return { ...state,\n        tasks: tasks.map(item => ({ ...item,\n          done: item._id === payload._id ? !item.done : item.done\n        }))\n      };\n\n    case COMPLETED_ALL_TASK:\n      return (() => {\n        return { ...state,\n          tasks: tasks.every(items => items.done) ? tasks.map(res => res.done = !res.done) : tasks.map(res => res.done = true)\n        };\n      })();\n\n    case DELETE_TASK:\n      return { ...state,\n        tasks: [...state.tasks].filter(task => task._id !== action._id)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/user/Desktop/Redux/redux-app-main/client/src/redux/itemsReducer.js"],"names":["LOAD_TASK","CREATE_TASK","FILTER_TASK","UPDATE_TEXT","DELETE_TASK","DELETE_TASK_ALL","COMPLETED_ALL_TASK","UPDATE_CHECK_TASK","initialState","tasks","filter","itemsReducer","state","action","payload","type","filt","items","done","map","item","task","_id","every","res"],"mappings":"AAAA,SACIA,SADJ,EAEIC,WAFJ,EAGIC,WAHJ,EAIIC,WAJJ,EAKIC,WALJ,EAMIC,eANJ,EAOIC,kBAPJ,EAQIC,iBARJ,QASO,SATP;AAaA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;AAKA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC1D,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;AACA,QAAM;AAAEJ,IAAAA;AAAF,MAAYG,KAAlB;;AAEA,UAAQC,MAAM,CAACE,IAAf;AACI,SAAKf,SAAL;AACI,aAAO,EAAE,GAAGY,KAAL;AAAYH,QAAAA,KAAK,EAAEK;AAAnB,OAAP;;AACJ,SAAKb,WAAL;AACI,aAAO,EAAE,GAAGW,KAAL;AAAYH,QAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBK,OAAjB;AAAnB,OAAP;;AACJ,SAAKZ,WAAL;AACI,aAAO,EAAE,GAAGU,KAAL;AAAYF,QAAAA,MAAM,EAAEG,MAAM,CAACG;AAA3B,OAAP;;AACJ,SAAKX,eAAL;AACI,aAAO,EAAE,GAAGO,KAAL;AAAYH,QAAAA,KAAK,EAAEA,KAAK,CAACC,MAAN,CAAcO,KAAD,IAAW,CAACA,KAAK,CAACC,IAA/B;AAAnB,OAAP;;AAEJ,SAAKf,WAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHH,QAAAA,KAAK,EAAEA,KAAK,CAACU,GAAN,CAAUC,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWC,UAAAA,IAAI,EAAED,IAAI,CAACE,GAAL,KAAaR,OAAO,CAACQ,GAArB,GAA2BR,OAAO,CAACO,IAAnC,GAAyCD,IAAI,CAACC;AAA/D,SAAL,CAAd;AAFJ,OAAP;;AAIJ,SAAKd,iBAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHH,QAAAA,KAAK,EAAEA,KAAK,CAACU,GAAN,CAAUC,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWF,UAAAA,IAAI,EAAEE,IAAI,CAACE,GAAL,KAAaR,OAAO,CAACQ,GAArB,GAA2B,CAACF,IAAI,CAACF,IAAjC,GAAwCE,IAAI,CAACF;AAA9D,SAAL,CAAd;AAFJ,OAAP;;AAIJ,SAAKZ,kBAAL;AACI,aAAO,CAAC,MAAM;AAGV,eAAO,EACH,GAAGM,KADA;AAEHH,UAAAA,KAAK,EAAEA,KAAK,CAACc,KAAN,CAAYN,KAAK,IAAIA,KAAK,CAACC,IAA3B,IAAmCT,KAAK,CAACU,GAAN,CAAUK,GAAG,IAAIA,GAAG,CAACN,IAAJ,GAAW,CAACM,GAAG,CAACN,IAAjC,CAAnC,GAA4ET,KAAK,CAACU,GAAN,CAAUK,GAAG,IAAIA,GAAG,CAACN,IAAJ,GAAW,IAA5B;AAFhF,SAAP;AAIH,OAPM,GAAP;;AAQJ,SAAKd,WAAL;AACI,aAAO,EAAE,GAAGQ,KAAL;AAAYH,QAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBC,MAAjB,CAAwBW,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaT,MAAM,CAACS,GAApD;AAAnB,OAAP;;AACJ;AACI,aAAOV,KAAP;AAhCR;AAkCH,CAtCM","sourcesContent":["import {\n    LOAD_TASK,\n    CREATE_TASK,\n    FILTER_TASK,\n    UPDATE_TEXT,\n    DELETE_TASK,\n    DELETE_TASK_ALL,\n    COMPLETED_ALL_TASK,\n    UPDATE_CHECK_TASK\n} from \"./types\";\n\n\n\nconst initialState = {\n    tasks: [],\n    filter: 'all',\n}\n\nexport const itemsReducer = (state = initialState, action) => {\n    const { payload } = action;\n    const { tasks } = state;\n\n    switch (action.type) {\n        case LOAD_TASK:\n            return { ...state, tasks: payload }\n        case CREATE_TASK:\n            return { ...state, tasks: [...state.tasks, payload] } \n        case FILTER_TASK:\n            return { ...state, filter: action.filt }\n        case DELETE_TASK_ALL:\n            return { ...state, tasks: tasks.filter((items) => !items.done) } \n\n        case UPDATE_TEXT: \n            return {\n                ...state,\n                tasks: tasks.map(item => ({ ...item, task: item._id === payload._id ? payload.task: item.task }))\n            }\n        case UPDATE_CHECK_TASK:\n            return {\n                ...state,\n                tasks: tasks.map(item => ({ ...item, done: item._id === payload._id ? !item.done : item.done }))\n            }\n        case COMPLETED_ALL_TASK:\n            return (() => {\n                \n                             \n                return {\n                    ...state,\n                    tasks: tasks.every(items => items.done) ? tasks.map(res => res.done = !res.done) : tasks.map(res => res.done = true) \n                }\n            })();\n        case DELETE_TASK:\n            return { ...state, tasks: [...state.tasks].filter(task => task._id !== action._id) }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}